#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
colnames(lee2)
#Recoding IV and DV measures and renaming
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
summary(lee2$CompHap)
head(lee2$CompHap)
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
library(tidyverse)
fvs <- read_csv("data/FVS2011-hands.csv")
View(fvs)
ggplot(newdata, aes(x=age)) + geom_histogram()
ggplot(fvs, aes(x=age)) + geom_histogram()
ggplot(fvs, aes(x=age)) + geom_histogram()
newdata <- fvs %>%
distinct(subid, .keep_all= TRUE)
ggplot(newdata, aes(x=age)) + geom_histogram() # Change the width of bins
newdata <- fvs %>%
distinct(subid, .keep_all= TRUE)
View(newdata)
newdata <- fvs %>%
distinct(subid, .keep_all= TRUE)
View(newdata)
ggplot(newdata, aes(x=age)) + geom_histogram()
age = fvs$age                       # create an age variable
condition = fvs$condition           # create condition variable
plot(age, condition,              # plot the variables
+   xlab="Age",                     # x−axis label
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,              # plot the variables
+   xlab="Age",                     # x−axis label
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,
+   xlab="Age",
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,
+   xlab="Age",
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,
xlab="Age",
ylab="Condition")
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,
xlab="Age",
ylab="Condition", frame = FALSE)
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
fvs %>%
plot(age, condition,
xlab="Age",
ylab="Condition", frame = FALSE)
tps = replicate(10000,t.test(rnorm(30),rnorm(30))$p.value)
#range(tps)
tvalue <- tps$p.value < .05 #what is this $ doing here?
library(tidyverse)
fvs <- read_csv("data/FVS2011-hands.csv")
library(tidyverse)
fvs <- read_csv("data/FVS2011-hands.csv")
# Remove duplicate rows of the dataframe using subject ID
newdata <- fvs %>%
distinct(subid, .keep_all= TRUE)
View(newdata)
ggplot(newdata, aes(x=age)) + geom_histogram() # Change the width of bins
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
fvs %>%
plot(age, condition,
xlab="Age",
ylab="Condition", frame = FALSE)
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
fvs %>%
plot(age, condition,
xlab="Age",
ylab="Condition")
tps <- replicate(10000, t.test(rnorm(30)))
#range(tps)
summary(tps)
range(tps)
table(sapply(tps, "[[", "p.value") < .05)
tps[1:3]
tps[1:3]
tps[1:5]
tps[1:10]
tps <- replicate(10, t.test(rnorm(30)))
View(tps)
tps <- replicate(10, t.test(rnorm(30)))
pvalues <- sapply(tps, function(x) x$p.value)
tps <- replicate(10, t.test(rnorm(30)), simplify=TRUE)
tps <- replicate(10, t.test(rnorm(30)), simplify=TRUE)
View(tps)
tps <- replicate(10, t.test(rnorm(30)), simplify=FALSE)
View(tps)
tps <- replicate(10, t.test(rnorm(30)), simplify=FALSE)
View(tps)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
tps <- replicate(10, t.test(rnorm(30)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
table(sapply(tps, "[[", "p.value") < .05)
tps <- replicate(10, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
table(sapply(tps, "[[", "p.value") < .05)
tps <- replicate(10000, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
table(sapply(tps, "[[", "p.value") < .05)
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
fvs %>%
plot(age, condition,
xlab="Age",
ylab="Condition")
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
# make the scatterplot
plot(age, condition,
xlab="Age",
ylab="Condition")
plot(fvs$age, fvs$condition,
xlab="Age",
ylab="Condition")
tps <- replicate(10000, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
table(sapply(tps, "[[", "p.value") < .05)
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
tps <- replicate(10000, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
#table(sapply(tps, "[[", "p.value") < .05)
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
tps <- replicate(10000, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
tps <- replicate(10000, t.test(rnorm(30, mean = 0, sd = 1)), simplify=FALSE)
pvalues <- sapply(tps, function(x) x$p.value)
pvalues
p.values.lt05 <- pvalues <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
Final.Result
age <- fvs$age                       # create an age variable
condition <-fvs$condition           # create condition variable
plot(age,condition)
```{r}
double.sample <- function(N.Sim) {
N.Sim # Number of simulations
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
#for (i in 1:N.Sim) { # Define the action for each loop
while ("Final.Result > .05 | Final.Result < .25") {
for (i in 1:30) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 10 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
}
}
print (Final.Result)
}
double.sample(5)
double.sample <- function(N.Sim) {
N.Sim # Number of simulations
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
Final.Result <- .20
#for (i in 1:N.Sim) { # Define the action for each loop
while (Final.Result > .05 | Final.Result < .25) {
for (i in 1:30) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 10 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
}
}
print (Final.Result)
}
double.sample(10)
double.sample <- function(N.Sim) {
N.Sim # Number of simulations
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
Final.Result <- .20
#for (i in 1:N.Sim) { # Define the action for each loop
while (Final.Result > .05 | Final.Result < .25) {
for (i in 1:30) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 10 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
}
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
}
print (Final.Result)
}
double.sample(10)
double.sample(10)
double.sample <- function(N.Sim) {
success <- FALSE
while (!success) {
for (i in 1:30) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 30 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
}
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
success <- Final.Result < .05 | Final.Result > .25
}
print(Final.Result)
}
double.sample(10)
double.sample <- function(N.Sim) {
success <- FALSE
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
while (!success) {
for (i in 1:N.Sim) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 30 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
}
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
success <- Final.Result < .05 | Final.Result > .25
}
print(Final.Result)
}
double.sample(10)
double.sample(10)
double.sample(10)
double.sample <- function(N.Sim) {
success <- FALSE
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
while (!success) {
for (i in 1:30 { # Define the action for each loop
double.sample <- function(N.Sim) {
success <- FALSE
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
while (!success) {
for (i in 1:30) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 30 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
}
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
success <- Final.Result < .05 | Final.Result > .25
}
print(Final.Result)
}
double.sample(10)
double.sample <- function(N.Sim) {
success <- FALSE
p.values <- rep(NA, N.Sim) # Place-holder vector to update with simulation results
while (!success) {
for (i in 1:N.Sim) { # Define the action for each loop
Sample.Data <- rnorm(30, mean = 0, sd = 1) # Generate 30 observations from the standard normal dist
Test <- t.test(Sample.Data) # Conduct a one-sample t.test on the sample data
Current.p.value <- Test$p.value # Extract the p-value from the test
p.values[i] <- Current.p.value # Add the p-value to the p.values vector
}
p.values.lt05 <- p.values <= .05 # Create a new vector indicating which p.values are less than .05
Final.Result <- mean(p.values.lt05)  # Final result! Should be close to .05
Final.Result
success <- Final.Result < .05 | Final.Result > .25
}
print(Final.Result)
}
double.sample(100)
setwd("~/Desktop/lee2018/pilot_b")
#load library
library("tidyverse")
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
get wd
wd
getwd
getwd()
#load library
library("tidyverse")
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
View(lee)
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
View(lee)
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
View(lee)
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#Makes character class numeric
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1)
d
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
View(d)
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#Makes character class numeric
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
#Recoding IV and DV measures and renaming
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
summary(lm(ComparativeHappiness~MacArthurScale,data=d))
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#Makes character class numeric
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
#Recoding IV and DV measures and renaming
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
summary(lm(ComparativeHappiness~MacArthurScale,data=d))
figure <- d %>%
ggplot(aes(x = MacArthurScale, y = ComparativeHappiness)) +
geom_smooth(method = "lm", fill = NA)
figure + geom_hline(yintercept=0, color = "black") +
# geom_vline(xintercept = 0, color = "black") +
# xlim(c(1, 10)) +
labs(x = "Social Class (Mac Arthur Scale)") +
labs(y = "Comparative Purchase Happiness")  +
ggthemes::theme_few()
d %>%
ggplot(aes(x = MacArthurSES, y = CompHap)) +
geom_point(colour = "blue")
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#Makes character class numeric
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
#Recoding IV and DV measures and renaming
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
d %>%
ggplot(aes(x = MacArthurSES, y = CompHap)) +
geom_point(colour = "blue")
summary(lm(ComparativeHappiness~MacArthurScale,data=d))
figure <- d %>%
ggplot(aes(x = MacArthurScale, y = ComparativeHappiness)) +
geom_smooth(method = "lm", fill = NA)
figure + geom_hline(yintercept=0, color = "black") +
# geom_vline(xintercept = 0, color = "black") +
# xlim(c(1, 10)) +
labs(x = "Social Class (Mac Arthur Scale)") +
labs(y = "Comparative Purchase Happiness")  +
ggthemes::theme_few()
#Dashed lines (coded below) will be added once sample size is large enough to calculate
#  geom_vline(xintercept = XX, linetype="dashed", color = "blue") +
# geom_vline(xintercept = XX, linetype="dashed", color = "blue")
#As mentioned above, the N here is very small (4), so it's unsurprising that this figure does not replicate the original study. The x-intercept is near that of the original.
cor(d$ComparativeHappiness, d$MacArthurScale)
cor
l <- lm(ComparativeHappiness~MacArthurScale,data=d)      #run regresssion & assign variable
#Generate a list of CIs for each IV value--locate values that have CIs not intersecting 0
predict(l,newdata = data.frame
(MacArthurScale=d$MacArthurScale),
interval="confidence",level = 0.95)
#load library
library("tidyverse")
#import data
lee <- read_csv("251_Reproduce_November 24, 2019_04.17.csv")
#Remove first two rows
lee2 <- lee %>%
filter(!((IPAddress == "IP Address") |
IPAddress == "{\"ImportId\":\"ipAddress\"}")) %>%
mutate(subid = row_number()) %>%                     #Insert subject ID row
select(contains("subid"), CompHap, MacArthurSES)       #Select relevant columns
#Makes character class numeric
lee2$CompHap <- as.numeric(lee2$CompHap)
lee2$MacArthurSES <- as.numeric(lee2$MacArthurSES)
#Recoding IV and DV measures and renaming
d <- lee2 %>%
mutate(ComparativeHappiness=CompHap*-1) %>% # this recodes the two columns
mutate(MacArthurScale=MacArthurSES*-1)
d %>%
ggplot(aes(x = MacArthurSES, y = CompHap)) +
geom_point(colour = "blue")
summary(lm(ComparativeHappiness~MacArthurScale,data=d))
figure <- d %>%
ggplot(aes(x = MacArthurScale, y = ComparativeHappiness)) +
geom_smooth(method = "lm", fill = NA)
figure + geom_hline(yintercept=0, color = "black") +
# geom_vline(xintercept = 0, color = "black") +
# xlim(c(1, 10)) +
labs(x = "Social Class (Mac Arthur Scale)") +
labs(y = "Comparative Purchase Happiness")  +
ggthemes::theme_few()
#Dashed lines (coded below) will be added once sample size is large enough to calculate
#  geom_vline(xintercept = XX, linetype="dashed", color = "blue") +
# geom_vline(xintercept = XX, linetype="dashed", color = "blue")
#As mentioned above, the N here is very small (4), so it's unsurprising that this figure does not replicate the original study. The x-intercept is near that of the original.
cor(d$ComparativeHappiness, d$MacArthurScale)
cor
cor(d$ComparativeHappiness, d$MacArthurScale)
l <- lm(ComparativeHappiness~MacArthurScale,data=d)      #run regresssion & assign variable
#Generate a list of CIs for each IV value--locate values that have CIs not intersecting 0
predict(l,newdata = data.frame
(MacArthurScale=d$MacArthurScale),
interval="confidence",level = 0.95)
#CIs will give interger values that can be manually reviewed to find significant values
#the 7.02 in the code below is as an example
ci = predict(l,newdata = data.frame
(MacArthurScale=7.02),
interval="confidence",level = 0.95)
ci
